ติดตั้ง visual studio 2013 หรือ 2015 community ก็ได้ก่อน

ติดตั้ง jenkins server
- download https://jenkins-ci.org/content/thank-you-downloading-windows-installer/
- extrac zip แล้วกดติดตั้งไปตามปกติ
- ติดตั้งเสร็จจะเปิดหน้าแรกให้เราเลย http://localhost:8080/
- ไปที่ Manage Jenkins -> Manage Plugins


ลง plugin ตามนี้
- git -> https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin
- MSBuild -> https://wiki.jenkins-ci.org/display/JENKINS/MSBuild+Plugin
- VsTestRunner -> https://wiki.jenkins-ci.org/display/JENKINS/VsTestRunner+Plugin
- xfpanel -> https://wiki.jenkins-ci.org/display/JENKINS/eXtreme+Feedback+Panel+Plugin

เริ่มต้น
- สร้าง repository ที่ github ก่อน ตั้งชื่อ reposotory ตามชื่อโครงการ ผมให้้ชื่อว่า hello-lib
- มาที่เครื่องเรา clone hello-lib จาก github ลงมา
- เปิด Visual Studio สร้าง project เป็น Blank Solution ให้เลือก folder ที่เป็น parent ของ folder ที่เรา clone hello-lib ลงมา
- ตั้งชื่อ project ว่า hello-lib จะแสดงโครงสร้าง ดู images\pic-1.npg
- สร้าง project แรกเป็น Unit Test Project ตั้งชื่อว่า HelloLib.Test ใส่ไว้ใน folder test
- push file ใหม่เข้าไปที่ github hello-lib


ติดตั้ง jenkins plugin Git 
- Manage Jenkins -> Manage Plugins
- ที่ tab Available ค้นหา git แล้วเลือก กด install
- ติดตั้งเสร็จไปตั้งค่า Manage Jenkins -> Configuration System ต้งต่า Git client path ถ้ามี ตามภาพ pic-2 ของผมมีอยู่แล้ว
- config อีกจุด Git plugin ใส่ชื่อที่ตัวเอง และ email ที่สมัคร github ไว้ ตามภาพ pic-3
- เสร็จแล้ว กด save ครับ

เอาละ มาทดสอบ pull source จาก github ด้วย jenkins กันเลย
- ไปที่ jenkins เลือก New Item เพื่อสร้าง job ใส่ข้อมูงและเลือกตามภาพ 4
- ที่ Source Code Management เลือก git แล้วใส่ข้อมูลตามภาพ 5
- ออกไปข้านอก ลองกด run job ดู เมื่อ run job สำเร็จจะ สภานะจะเป็นสีน้ำเงิน ตามภาพ 6
- ไปดูที่ folder ที่ติดตั้งเจนกิน C:\Program Files (x86)\Jenkins\jobs\hello-lib\workspace จะแสดง source file ที่ clone มากจาก 
hello-lib เรียบร้อยแล้ว ดังภาพ 7

ทีนี้มาถึงขั้นตอน build solution กันต่อ
ให้ติดตั้ง jenkins plugin MSBuild
- เหมือนเดิม ไปที่ Manage Jenkins -> Manage Plugins ดูภาพ 8
- ที่ tab Available ค้นหา MSBuild แล้วเลือก กด install ดูภาพ 9
- ติดตั้งเสร็จ ต้องไป config MSBuild ไปที่ Manage Jenkins -> Configure System ดูภาพ 10
- ที่ส่วนของ MSBuild กด Add MSBuild แล้วใส่ค่า cofig ดังภาพ 11 
- เสร็จแล้ว กด save ครับ

เมือติดตั้ง jenkins plugin MSBuild และ config เป็นที่เรียบร้อยแล้ว ก็กลับไปที่ job hello-lib เพื่อเพิ่มขั้นตอน build code กันครับ
- ไปที่ job hello-lib เลือก Configure 
- ไปที่ส่วนของ Build กด Add build step > Build a Visual Studio project or solution using MSBuild แล้ว config ตามภาพ 12
- กด save ครับ

ทีนี้พอเราทดลองกด run build อีกที นอกจากเราจะได้ source code ใหม่จาก github แล้ว job นี้ก็ยัง build code ให้เราอีกด้วย 
โดยดูไปดูที่ folde der HelloLib.Test จะได้จาก folder bin เพิ่มขึ้นมานั่นคือ build file ของเราครับ ดูภาพ 13

ให้ลองลบ file ทั้งหมดใน \Jenkins\jobs\hello-lib\workspace แล้วกด job ใหม่ดูครับ 

เอาละเราได้ automate build แล้วละครับทีนี้ ต่อไปก็พัฒนาซอฟแวร์ต่อ

ผมจะใช้เทคนิคที่เรียกว่า Test-Driven Development (TDD) โดยผลลัพย์ขั้นสุดท้ายของเรา ต้องถูกกฏง่ายๆ 2 ข้อ คือ
1 ต้องมี automate test
2 code ที่เขียนต้องไม่ซ้ำซ้อนกัน
โดยขั้นตอนการทำ TDD มี 3 ขั้นตอน คือ
1 เขียนทดสอบผลลัพย์ที่ต้องการให้เป็นผิดพลาด หรือขั้นตอน Red
2 เขียน code ให้ได้ผลลัพย์ที่ทดสอบผ่าน หรือขั้นตอน Green
3 แก้ไข code ให้ไม่ซ้ำซ้อนกัน หรือที่เรียกว่า Refactor

จากกฎบังคับของ TDD ข้อแรก คือผลลัพย์จะต้องมี automate test แต่ตอนนี้ผมมี แต่ automate build 
งั้นเรามาติดตั้ง automate test ให้ jenkins กันก่อน

ติดตั้ง jenkins plugin VsTestRunner
- ไปที่ Manage Jenkins -> Manage Plugins ดูภาพ 8
- ที่ tab Available ค้นหา VsTestRunner แล้วเลือก VsTestRunner และ MSTest(ใช้แสดง test report) ด้วยครับ กด install ดูภาพ 14
- พอเรากด install ให้เราเลือก Restart Jenkins when ... ตามภาพ 15 ครับ
- พอติดตั้งเสร็จ ก็กลับไปที่ Manage Jenkins -> Configuration System 
- ไปที่ส่วนของ VSTest กด Add VSTest แล้ว config ตามภาพ 16

กลับไปที่ job hello-lib ครับ
- ไปที่ Configure กด Add build step เพิ่ม automate test 
- ใส่ข้อมูลตามภาพ 17 
- ก็ไปที่ Post-build Action กด Add post-build action 
- เพิ่ม step action Publish MSTest test result report แล้ว config ตามภาพ 18 ครับ
- กด save ครับ

ลองกลับไปกด build job hello-lib ดูครับ ถ้า build สำเร็จ จะปรากฏ folder TestResults 
นั่นหมายความว่าเรามี automate test ไว้ใช้แล้วครับ ดูภาพ 19 
(ดูจากภาพ ผม build ไปหลายรอบแล้วครับ เพราะว่า config ผิดไปหลายรอบก่อนจะเขียนที่ถูกต้องมานำเสนอนี้ได้ :)

ทีนี้เราก็พร้อมทำ TDD กันได้แล้วล่ะ

กลับไปที่ project HelloLib.Test ครับ ผมขอไม่เปลี่ยนชื่อ default ใดๆที่เครื่องมือตั้งมาให้นะครับ
ผมจะเริ่มจากเขียนทดสอบ งานง่ายๆ คือ Hi แล้วตามด้วยชื่อ ที่ใส่เข้าไป ดูภาพ 20
หลังจากนั้นผม push code นี้ขึ้น github เพื่อทดสอบ automate test ของผมก่อนนะครับ
พอ push code ขึ้น github สำเร็จ
แล้วลอง กด build job อีกครั้ง ... จะเป็น build ที่ผิดผลาดแล้ว ดูภาพ 21 และ 22

รูปที่ 22 ที่กราฟด้านซ้าย แกนตั้งแสดงจำนวน test case ส่วนแกนนอแสดง ครั้งที่ build 
ครับจะเห็นว่ากราฟเป็นสีแดง ซึ่งแน่นอนว่า มีข้อผิดผลาดเกิดขึ้น 1 case ที่ผมเขียนไว้

เอาละก่อนที่เราจะไปแก้ไข code ให้อยู่ใน step Green ต่อไป ผมรู้สึกขึ้เกียจกลับว่า กด build job เองแล้ว
ซึ่งผมอยากให้มันทำงานเองแบบ auto จริง ไม่ยากเลยครับ กลับไปที่ job hello-lib ครับ ไป Configure 
ไปที่ส่วน Build Triggers เลือก Build periodically แล้วใส่ข้อมูลตามภาพ 23 ครับ
นี่เป็นการ ตั้งให้ job ผม ถูก build ทุกๆ 3 นาทีครับ

ตั้งค่าเสร็จอย่าลืมกด save ครับ ต่อไปผมก็ไม่ต้องมาคอยกด build job ด้วยตนเองอีกแล้ว 

การดูผลลัพย์จกาการ build ไม่ค่อยเท่เท่าไหร่ ในกรณีที่ทำงานหลายๆโครงการ หลายๆคน ผมก็อยากให้ทุกคนหลังจากพัฒนา code เสร็จ
เมื่อ push ขึ้นไปรวมกันบน github แล้วแสดงข้อผิดพลาดให้เห็นทันที แบบทั่วๆกันไปเลย เพื่อดำเนินการแก้ไขตามหลักการของ Continueuse Integration 
ผมแนะนำ การแสดงผลที่ง่ายๆ เป็นกระดานการ์ด ด้วย jenkins plugin eXtreme Feedback Panel Plugin  

ติดตั้ง eXtreme Feedback Panel Plugin
- ไปที่ Manage Jenkins -> Manage Plugins ดูภาพ 8
-  ที่ tab Available ค้นหา xfpane แล้วเลือก กด install ดูภาพ 24
- เหมือนเดิมครับให้ check restart jenkins หลังจากติดตั้งเสร็จ

กลังจากติดตั้งเสร็จ ให้เปิดใช้กระดาน eXtreme Feedback Panel โดยไปที่หน้าแรก แล้วกด + ที่แทบใกล้ All job ครับ ดูรูป 25
กด + แล้วจะมี eXtreme Feedback Panel ให้เลือก ตั้งชื่อ แล้วกด Ok ตามภาพ 26
จะไปหน้าให้ configure ที่ Job options ผมเลือก hello-lib ถ้าเรามี job มากกว่านี้มันก็จะแสดงให้เลือกครับ
กด OK ครับ จะแสดง หน้า กระดานเท่ๆ แบบรูป 27 
ถ้าต้องการ แก้ไขการแสดงผม eXtreme Feedback Panel ให้ไปที่ url ของกระดานนะครับแล้ว เติม /configure 
เช่นตัวอย่างนี้ไปที่ http://localhost:8080/view/my-eXtreme/configure ก็จะกลับไปที่หน้า config อีกครั้งได้

OK พร้อมแล้วครับ กลับไป พัฒนา code ต่อได้
ไปที่โปรเจ็ค HelloLib.Test ของเราต่อครับ แก้ไข code ให้ทำงานถูกต้อง ตามภาพ 28 นี้เลยครับ
เสร็จแล้วให้ push code ขึ้น github เดิม แล้วรอสักพัก ที่หน้า eXtreme Feedback Panel จะแสดงแบบนี้ครับ ดูภาพ 29

เสร็จแล้วครับผม 
หวังว่าคงจะเป็นประโยชน์ และสนุกไปกับ Continues Integration ด้วย Jenkins นะครับ

ขอบคุณครับ
#:P



